*************************************************************************
**********                    UNIDAD III                    *************
************************************************************************* 

RELACIONES ENTRE TABLAS 

	└►	1 - 1 			:	suelen entenderse como una unica tabla 
	└►	1 - varios		:	relaciones de un objeto a varias (estudiante - matriculas)
	└►	varios - varios	: 	relaciones de muchos a mkuchos (tabla de rompimiento)

	CASCADE se usa para las operaciones en secuencia de entidades
	
	REMOVE			remover en cascada
	MERGE			actualizar en cascada
	PERSIST			insertar en cascada
	ALL				todo en cascada
	REFRESH 		actualizacion en un objeto que se ha buscado de manera inmediata y avanzada 	
	DETACH			desenlazar en casacada
	
	EAGER			asi no se necesite trae las relaciones
	LAZILY			trae cuando sea necesario en la capa Repo
	
	NOTA: Jakarta persitence no trae las relaciones por defecto (Lazily) 
	
EXISTEN 3 FORMAS DE EJECUTAR QUERYS COMPLEJOS EN JAKARTA 

	└►QUERY					Tiene su propio lenguaje JPQL (Java Persistance Query Language)(parecido al SQL)
							Retorna Genericos
							lenguaje de consultas orientado a objetos cualquiera  de Jakarta Persistence
							└►TypedQuery		orientado a objetos Especificos 
							└►NamedQuery		Darle un alias a un Query para reusarlo
							Beneficios:			-► Mantenimiento 
												└► Reutilizacion
												└► Orden
										
	
	└►NATIVE QUERY			No usa JPQL usa SQL Nativo
							se usa en SQL Complejos
							Beneficios:			-► Velocidad 
												└► Rendimiento
												
	
	└►CRITERIA API QUERY	API: conjunto de librerias/metodos 
							que permiten construir un query de manera programatica 
																		└►Clases
																		└►Metodos 
							Beneficios:			-► Manera Dinamica 
												
NOTA: 	Hibernate INDEPENDIZA el codigo de la base de datos 

NOTA: 	no todas las consultas devuelven una sola entidad

NOTA: 	El IVA se debe obtener un unico registro (.getSingleResult())
	
NOTA: 	El reporte general + pesado - eficiente

DTO:	Objeto con campos especificos 	(Estudiante sencillo)
		Data Transfer Object			(Objeto Sencillo)
		objetos con los campos sencillos reducidos
		
NOTA: 	La buena practica es declarar explicitamente el constructor por defecto cuando
		se declara un constructor especifico